#!/usr/bin/env bash
case ${BASH_VERSION} in ''|[123].*) printf 'Bash 4.0+ required' >&2; exit 1; ;; esac

declare -- coloroutput=false
declare -- fullurl=false
declare -- vsys=false
declare -- vformat=packages,affected,fixed,status,severity,name
declare -- dbpath='/var/lib/pacman'
declare -- securl='https://security.archlinux.org/issues/vulnerable/json'
declare -r -- red='\x1b[91m\x1b[1m'
declare -r -- yel='\x1b[93m\x1b[1m'
declare -r -- grn='\x1b[92m\x1b[1m'
declare -r -- esc='\x1b[0m'
declare -ar -- depends=('pacman' 'jq' 'sed' 'column' 'cat' 'curl')
declare -i -- vcount
declare -a -- vrows
declare -A -- vfields
declare -A -- packagelist
declare -- jdata
declare -- jqcommand
declare -- opt
declare -- package
declare -- vaffected
declare -- vf
declare -- vheaders
declare -- vpackage

showhelp() {
	cat <<-EOF
		Usage:
		    -h    Show this help message
		    -a    Show all fields
		          This is equal to -f name,packages,status,severity,type,affected,fixed,ticket,issues
		    -f    Custom format, e.g. -f packages,affected,severity
		    -v    Show all vulnerable packages, not just ones on the system
		    -c    Colorize output
		    -t    Test against all packages, including fixed ones
		    -l    Link to the full AVG URL
		    -n    Do not count vulnerable/listed packages at the end
		    -b    Alternative database location
		
		Fields:
		    name        Link to the Arch Vulnerability Group number
		    packages    List of the affected packages
		    status      Shows whether it is fixed or not
		    severity    From Critical, High, Medium, to Low
		    type        Short description on the type of attack
		    affected    Version number of the affected package
		    fixed       Version number of the fixed package
		    ticket      Ticket number for bugs.archlinux.org
		    issues      List of related CVEs
	EOF
	exit
}

hash -- "${depends[@]}" || exit 1

while getopts 'haf:vctlnb:' opt; do
	case ${opt} in
		h) showhelp; ;;
		a) vformat=name,packages,status,severity,type,affected,fixed,ticket,issues ;;
		f) vformat=${OPTARG} ;;
		v) vsys=false ;;
		c) coloroutput=true ;;
		t) securl='https://security.archlinux.org/all.json' ;;
		l) fullurl=true ;;
		n) vcount=false ;;
		b) dbpath=${OPTARG}; [[ -d "${dbpath}" ]] || { printf '%s not a directory\n' "${dbpath}" >&2; exit 1; } ;;
		*) showhelp ;;
	esac
done

jdata=$(curl -L -s "${securl}") || { printf 'Unable to retrieve data.\n' >&2; exit 1; }

vfields=(
	[issues]='.issues[]' [packages]='.packages[]' [name]='.name'
	[status]='.status' [severity]='.severity' [type]='.type'
	[affected]='.affected' [fixed]='.fixed' [ticket]='.ticket'
)
${fullurl} && vfields[name]='"https://security.archlinux.org/" + .name'

while read -r -d, vf; do
	[[ -z ${vfields[${vf}]} ]] && { printf '%q not a valid field\n' "${vf}" >&2; exit 1; }
	jqcommand+=" + \",\" + ${vfields[${vf}]}"
done <<< "${vformat},"

jqcommand=${jqcommand:9}
vheaders=${vformat^^}

while read -r package; do
	packagelist[${package%% *}]=${package##* }
done < <(pacman -Q)

while read -r vpackage vaffected; do
	[[ ${packagelist[${vpackage}]} == "${vaffected}" ]] &&
		vrows+=("$(jq -r ".[] | select((.affected == \"${vaffected}\") and .packages[0] == \"${vpackage}\") | ${jqcommand}" <<< "${jdata}")")
done < <(jq -r '.[] | .packages[] + " " + .affected' <<< "${jdata}")

((${#vrows[@]})) || { printf 'No vulnerable packages installed.\n'; exit; }

if ${coloroutput}; then
	printf '%s\n%s\n' "${vheaders}" "${vrows[@]}" | column -s, -t | \
		sed "s/Critical/${red}Critical${esc}/g;
			s/High/${red}High${esc}/g;
			s/Vulnerable/${red}Vulnerable${esc}/g;
			s/Medium/${yel}Medium${esc}/g;
			s/Low/${grn}Low${esc}/g"
else
	printf '%s\n%s\n' "${vheaders}" "${vrows[@]}" | column -s, -t
fi

if ${vcount}; then
	printf '\n%s vulnerable packages ' "${#vrows[@]}"
	${vsys} && printf 'installed\n' || printf 'listed\n'
fi
